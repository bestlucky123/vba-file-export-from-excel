Private Sub CommandButton1_Click()
    Dim ws As Worksheet
    Dim r As Long
    Dim startRow As Long
    Dim lastRow As Long
    Dim lastFileContentRow As Long
    Dim fileName As String
    Dim fileContent As String
    Dim fso As Object
    Dim txtFile As Object
    Dim outputFolderPath As String
    Dim outputFile As String
    Dim sourceFileName As String
    Dim folderName As String
    Dim strText As String
    
    
    sourceFileName = Dir(ThisWorkbook.Path & "\*.xlsx")
    
    Set ws = Workbooks.Open(ThisWorkbook.Path & "\" & sourceFileName).Sheets("SQL_TEMP") ' Adjust the sheet name as needed
    
    
    ' Generate timestamp
    Dim timestamp As String
    Dim code As String
    Dim regexPattern As String
    regexPattern = ".*_(\d+)_.*"

    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")

    With regex
    .Global = False
    .IgnoreCase = True
    .Pattern = regexPattern
End With
    
    Dim matches As Object
    Set matches = regex.Execute(sourceFileName)

    If matches.Count > 0 Then
        Dim match As Object
        Set match = matches(0)
        
        code = match.SubMatches(0)
    End If

    timestamp = Format(Now, "YYYYMMDDHHMMSS")
    
    ' Create folder name
    folderName = timestamp & "_" & code
    
    ' Create the folder
    MkDir ThisWorkbook.Path & "\" & folderName
    outputFolderPath = ThisWorkbook.Path & "\" & folderName

    ' Initialize FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")

    ' Find the lastRow by looking for the first cell that ends with ".txt"
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Find the lastFileContentRow by looking for the first cell that ends with ".txt"
    lastFileContentRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    
    ' Find the startRow by looking for the first cell that ends with ".txt"
    r = 1 ' Start from the first row
    Do While r <= lastRow
        If Right(ws.Cells(r, 1).Value, 4) = ".txt" Then
            startRow = r
            Exit Do
        End If
        r = r + 1
    Loop
    
    ' If no startRow is found, exit the sub
    If startRow = 0 Then
        MsgBox "Error, No .txt files found in SQL_TEMP sheet."
        Exit Sub
    End If
    
    ' Loop through each row starting from `startRow` until an empty cell is found in Column A
    For r = startRow To lastRow
        ' Get file name from Column A
        fileName = ws.Cells(r, 1).Value

        ' Determine the path and file name for the output
        outputFile = outputFolderPath & "\" & fileName

        ' Open the text file for writing
        Set txtFile = fso.CreateTextFile(outputFile, True, True) ' Overwrite if file already exists

        ' Initialize content string
        fileContent = ""
       
        ' Loop through the rows to concatenate content until a new file name is encountered
        Do While r <= lastFileContentRow And (ws.Cells(r, 1).Value = fileName Or ws.Cells(r, 1).Value = "")
            ' Get the content from Column B
            fileContent = ws.Cells(r, 2).Value
            If fileContent <> "" And fileContent <> " " Then
                fileContent = Trim(fileContent)
                fileContent = Replace(fileContent, """", "")
                
                ' Split the content by new line, then iterate over each line to process it
                Dim contentLines As Variant
                contentLines = Split(fileContent, ";")
                
                Dim line As Variant
                For Each line In contentLines
                    line = Trim(line) ' Remove any leading or trailing whitespace
                    If line <> "" Then ' Check if the line is not empty
                        ' Write the line to the file, add a semicolon at the end if it's missing
                        If Not Right(line, 1) = ";" Then
                            line = line & ";"
                        End If
                        txtFile.WriteLine line ' Write the line with a newline character
                    End If
                Next line
            End If
            
            If r = lastFileContentRow Then Exit Do
                
            ' Move to next row
            r = r + 1
        Loop
        
        txtFile.Close
        
        strText = readTextUTF16$(outputFile)   'read UTF-16 file, used as container for the case of huge text content

        If strText <> "" Then
            strText = RemoveEmptyLines(strText)


            ' Create ADODB.Stream object
            Dim stream As Object
            Set stream = CreateObject("ADODB.Stream")
            stream.Type = 2 ' Specify stream type as text
            stream.Charset = "utf-8" ' Set the input charset to UTF-8
            stream.Open
            stream.WriteText strText
            
            stream.SaveToFile outputFile, 2
            
            ' Close the stream
            stream.Close
        Else
            fso.DeleteFile outputFile ' Delete the created file if strText is empty
        End If
        
        r = r - 1 ' Adjust because the loop will increment r after finding the empty row

    Next r

    ' Clean up
    Set fso = Nothing
    Set txtFile = Nothing
    ws.Parent.Close SaveChanges:=False

    ' Confirmation message
    MsgBox "Text files have been created successfully."
End Sub

Function readTextUTF16$(f)
    With CreateObject("ADODB.Stream")
        .Charset = "utf-16": .Open
        .LoadFromFile f
        readTextUTF16$ = .ReadText
    End With
End Function

Function RemoveEmptyLines(text As String) As String
    Dim lines As Variant
    Dim result As String
    Dim line As Variant
    
    ' Split the text into lines
    lines = Split(text, vbCrLf)
    
    ' Iterate over each line
    For Each line In lines
        line = Trim(line) ' Remove spaces and tab characters from the start and end of the line
        ' Remove any additional carriage return or newline characters
        line = Replace(line, vbCr, "")
        line = Replace(line, vbLf, "")
        ' If the trimmed line is not empty, add it to the result
        If line <> "" Then
            result = result & line & vbLf ' Add the cleaned line back with a newline
        End If
    Next
    
    ' Remove the trailing newline character if there is one
    If Right(result, 2) = vbCrLf Then
        result = Left(result, Len(result) - 2)
    End If
    
    RemoveEmptyLines = result
End Function
